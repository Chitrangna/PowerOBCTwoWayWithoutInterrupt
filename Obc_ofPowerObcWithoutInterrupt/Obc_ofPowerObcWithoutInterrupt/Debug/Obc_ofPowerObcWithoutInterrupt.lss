
Obc_ofPowerObcWithoutInterrupt.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000220  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000274  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000002a4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000d8  00000000  00000000  000002e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000d5e  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a04  00000000  00000000  0000111a  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000762  00000000  00000000  00001b1e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000198  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005e5  00000000  00000000  00002418  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000203  00000000  00000000  000029fd  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000a8  00000000  00000000  00002c00  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	4b c0       	rjmp	.+150    	; 0x9c <__bad_interrupt>
   6:	00 00       	nop
   8:	49 c0       	rjmp	.+146    	; 0x9c <__bad_interrupt>
   a:	00 00       	nop
   c:	47 c0       	rjmp	.+142    	; 0x9c <__bad_interrupt>
   e:	00 00       	nop
  10:	45 c0       	rjmp	.+138    	; 0x9c <__bad_interrupt>
  12:	00 00       	nop
  14:	43 c0       	rjmp	.+134    	; 0x9c <__bad_interrupt>
  16:	00 00       	nop
  18:	41 c0       	rjmp	.+130    	; 0x9c <__bad_interrupt>
  1a:	00 00       	nop
  1c:	3f c0       	rjmp	.+126    	; 0x9c <__bad_interrupt>
  1e:	00 00       	nop
  20:	3d c0       	rjmp	.+122    	; 0x9c <__bad_interrupt>
  22:	00 00       	nop
  24:	3b c0       	rjmp	.+118    	; 0x9c <__bad_interrupt>
  26:	00 00       	nop
  28:	39 c0       	rjmp	.+114    	; 0x9c <__bad_interrupt>
  2a:	00 00       	nop
  2c:	37 c0       	rjmp	.+110    	; 0x9c <__bad_interrupt>
  2e:	00 00       	nop
  30:	35 c0       	rjmp	.+106    	; 0x9c <__bad_interrupt>
  32:	00 00       	nop
  34:	33 c0       	rjmp	.+102    	; 0x9c <__bad_interrupt>
  36:	00 00       	nop
  38:	31 c0       	rjmp	.+98     	; 0x9c <__bad_interrupt>
  3a:	00 00       	nop
  3c:	2f c0       	rjmp	.+94     	; 0x9c <__bad_interrupt>
  3e:	00 00       	nop
  40:	2d c0       	rjmp	.+90     	; 0x9c <__bad_interrupt>
  42:	00 00       	nop
  44:	2b c0       	rjmp	.+86     	; 0x9c <__bad_interrupt>
  46:	00 00       	nop
  48:	29 c0       	rjmp	.+82     	; 0x9c <__bad_interrupt>
  4a:	00 00       	nop
  4c:	27 c0       	rjmp	.+78     	; 0x9c <__bad_interrupt>
  4e:	00 00       	nop
  50:	25 c0       	rjmp	.+74     	; 0x9c <__bad_interrupt>
  52:	00 00       	nop
  54:	23 c0       	rjmp	.+70     	; 0x9c <__bad_interrupt>
  56:	00 00       	nop
  58:	21 c0       	rjmp	.+66     	; 0x9c <__bad_interrupt>
  5a:	00 00       	nop
  5c:	1f c0       	rjmp	.+62     	; 0x9c <__bad_interrupt>
  5e:	00 00       	nop
  60:	1d c0       	rjmp	.+58     	; 0x9c <__bad_interrupt>
  62:	00 00       	nop
  64:	1b c0       	rjmp	.+54     	; 0x9c <__bad_interrupt>
  66:	00 00       	nop
  68:	19 c0       	rjmp	.+50     	; 0x9c <__bad_interrupt>
  6a:	00 00       	nop
  6c:	17 c0       	rjmp	.+46     	; 0x9c <__bad_interrupt>
  6e:	00 00       	nop
  70:	15 c0       	rjmp	.+42     	; 0x9c <__bad_interrupt>
  72:	00 00       	nop
  74:	13 c0       	rjmp	.+38     	; 0x9c <__bad_interrupt>
  76:	00 00       	nop
  78:	11 c0       	rjmp	.+34     	; 0x9c <__bad_interrupt>
  7a:	00 00       	nop
  7c:	0f c0       	rjmp	.+30     	; 0x9c <__bad_interrupt>
  7e:	00 00       	nop
  80:	0d c0       	rjmp	.+26     	; 0x9c <__bad_interrupt>
  82:	00 00       	nop
  84:	0b c0       	rjmp	.+22     	; 0x9c <__bad_interrupt>
  86:	00 00       	nop
  88:	09 c0       	rjmp	.+18     	; 0x9c <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61
  98:	80 d0       	rcall	.+256    	; 0x19a <main>
  9a:	c0 c0       	rjmp	.+384    	; 0x21c <_exit>

0000009c <__bad_interrupt>:
  9c:	b1 cf       	rjmp	.-158    	; 0x0 <__vectors>

0000009e <TWI_init_master>:
{
	
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte received
	while((TWSR & 0xF8)!= 0x40);  // Check for the acknoledgement
	TWDR=data; // Address and read instruction
  9e:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <__TEXT_REGION_LENGTH__+0x7e0071>
  a2:	10 92 74 00 	sts	0x0074, r1	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  a6:	8c e0       	ldi	r24, 0x0C	; 12
  a8:	80 93 70 00 	sts	0x0070, r24	; 0x800070 <__TEXT_REGION_LENGTH__+0x7e0070>
  ac:	08 95       	ret

000000ae <TWI_start>:
  ae:	e4 e7       	ldi	r30, 0x74	; 116
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	94 ea       	ldi	r25, 0xA4	; 164
  b4:	a1 e7       	ldi	r26, 0x71	; 113
  b6:	b0 e0       	ldi	r27, 0x00	; 0
  b8:	90 83       	st	Z, r25
  ba:	80 81       	ld	r24, Z
  bc:	88 23       	and	r24, r24
  be:	ec f7       	brge	.-6      	; 0xba <TWI_start+0xc>
  c0:	8c 91       	ld	r24, X
  c2:	88 7f       	andi	r24, 0xF8	; 248
  c4:	88 30       	cpi	r24, 0x08	; 8
  c6:	c1 f7       	brne	.-16     	; 0xb8 <TWI_start+0xa>
  c8:	08 95       	ret

000000ca <TWI_repeated_start>:
  ca:	84 ea       	ldi	r24, 0xA4	; 164
  cc:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
  d0:	e4 e7       	ldi	r30, 0x74	; 116
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	88 23       	and	r24, r24
  d8:	ec f7       	brge	.-6      	; 0xd4 <TWI_repeated_start+0xa>
  da:	e1 e7       	ldi	r30, 0x71	; 113
  dc:	f0 e0       	ldi	r31, 0x00	; 0
  de:	80 81       	ld	r24, Z
  e0:	88 7f       	andi	r24, 0xF8	; 248
  e2:	80 31       	cpi	r24, 0x10	; 16
  e4:	e1 f7       	brne	.-8      	; 0xde <TWI_repeated_start+0x14>
  e6:	08 95       	ret

000000e8 <TWI_write_address_mt>:
  e8:	cf 93       	push	r28
  ea:	df 93       	push	r29
  ec:	c3 e7       	ldi	r28, 0x73	; 115
  ee:	d0 e0       	ldi	r29, 0x00	; 0
  f0:	e4 e7       	ldi	r30, 0x74	; 116
  f2:	f0 e0       	ldi	r31, 0x00	; 0
  f4:	24 e8       	ldi	r18, 0x84	; 132
  f6:	a1 e7       	ldi	r26, 0x71	; 113
  f8:	b0 e0       	ldi	r27, 0x00	; 0
  fa:	88 83       	st	Y, r24
  fc:	20 83       	st	Z, r18
  fe:	90 81       	ld	r25, Z
 100:	99 23       	and	r25, r25
 102:	ec f7       	brge	.-6      	; 0xfe <TWI_write_address_mt+0x16>
 104:	9c 91       	ld	r25, X
 106:	98 7f       	andi	r25, 0xF8	; 248
 108:	98 31       	cpi	r25, 0x18	; 24
 10a:	b9 f7       	brne	.-18     	; 0xfa <TWI_write_address_mt+0x12>
 10c:	df 91       	pop	r29
 10e:	cf 91       	pop	r28
 110:	08 95       	ret

00000112 <TWI_write_address_mr>:
 112:	cf 93       	push	r28
 114:	df 93       	push	r29
 116:	c3 e7       	ldi	r28, 0x73	; 115
 118:	d0 e0       	ldi	r29, 0x00	; 0
 11a:	e4 e7       	ldi	r30, 0x74	; 116
 11c:	f0 e0       	ldi	r31, 0x00	; 0
 11e:	24 e8       	ldi	r18, 0x84	; 132
 120:	a1 e7       	ldi	r26, 0x71	; 113
 122:	b0 e0       	ldi	r27, 0x00	; 0
 124:	88 83       	st	Y, r24
 126:	20 83       	st	Z, r18
 128:	90 81       	ld	r25, Z
 12a:	99 23       	and	r25, r25
 12c:	ec f7       	brge	.-6      	; 0x128 <TWI_write_address_mr+0x16>
 12e:	9c 91       	ld	r25, X
 130:	98 7f       	andi	r25, 0xF8	; 248
 132:	90 34       	cpi	r25, 0x40	; 64
 134:	b9 f7       	brne	.-18     	; 0x124 <TWI_write_address_mr+0x12>
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <TWI_write_data>:
}

void TWI_write_data(unsigned char data)//Function to write data on I2C data line
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
	begin:
	TWDR=data; // put data in TWDR
 140:	c3 e7       	ldi	r28, 0x73	; 115
 142:	d0 e0       	ldi	r29, 0x00	; 0
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 144:	e4 e7       	ldi	r30, 0x74	; 116
 146:	f0 e0       	ldi	r31, 0x00	; 0
 148:	24 e8       	ldi	r18, 0x84	; 132
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
	switch(TWSR & 0xF8){
 14a:	a1 e7       	ldi	r26, 0x71	; 113
 14c:	b0 e0       	ldi	r27, 0x00	; 0
}

void TWI_write_data(unsigned char data)//Function to write data on I2C data line
{
	begin:
	TWDR=data; // put data in TWDR
 14e:	88 83       	st	Y, r24
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 150:	20 83       	st	Z, r18
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
 152:	90 81       	ld	r25, Z
 154:	99 23       	and	r25, r25
 156:	ec f7       	brge	.-6      	; 0x152 <TWI_write_data+0x16>
	switch(TWSR & 0xF8){
 158:	9c 91       	ld	r25, X
 15a:	98 7f       	andi	r25, 0xF8	; 248
 15c:	98 32       	cpi	r25, 0x28	; 40
 15e:	b9 f7       	brne	.-18     	; 0x14e <TWI_write_data+0x12>
			break;
			
			default:
			goto begin;
		}
}
 160:	df 91       	pop	r29
 162:	cf 91       	pop	r28
 164:	08 95       	ret

00000166 <TWI_read_data>:

uint8_t TWI_read_data(void) //Function to read data from I2C data line
{
	uint8_t recv_data;
	TWCR=(1<<TWINT)|(1<<TWEN);    // Clear TWI interrupt flag,Enable TWI
 166:	84 e8       	ldi	r24, 0x84	; 132
 168:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while (!(TWCR & (1<<TWINT))); // Wait till complete TWDR byte transmitted
 16c:	e4 e7       	ldi	r30, 0x74	; 116
 16e:	f0 e0       	ldi	r31, 0x00	; 0
 170:	80 81       	ld	r24, Z
 172:	88 23       	and	r24, r24
 174:	ec f7       	brge	.-6      	; 0x170 <TWI_read_data+0xa>
	while((TWSR & 0xF8) != 0x58); // Check for the acknoledgement
 176:	e1 e7       	ldi	r30, 0x71	; 113
 178:	f0 e0       	ldi	r31, 0x00	; 0
 17a:	80 81       	ld	r24, Z
 17c:	88 7f       	andi	r24, 0xF8	; 248
 17e:	88 35       	cpi	r24, 0x58	; 88
 180:	e1 f7       	brne	.-8      	; 0x17a <TWI_read_data+0x14>
	recv_data=TWDR;//PORTA=recv_data;
 182:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <__TEXT_REGION_LENGTH__+0x7e0073>
	return recv_data;
	//if(UniversalCycles % CyclesToCollectData == 0){transmit_UART0(recv_data);}
	
}
 186:	08 95       	ret

00000188 <TWI_stop>:

void TWI_stop(void)//Function to stop data transmission
{
	// Clear TWI interrupt flag, Put stop condition on SDA, Enable TWI
	TWCR= (1<<TWINT)|(1<<TWEN)|(1<<TWSTO);
 188:	84 e9       	ldi	r24, 0x94	; 148
 18a:	80 93 74 00 	sts	0x0074, r24	; 0x800074 <__TEXT_REGION_LENGTH__+0x7e0074>
	while(!(TWCR & (1<<TWSTO)));  // Wait till stop condition is transmitted
 18e:	e4 e7       	ldi	r30, 0x74	; 116
 190:	f0 e0       	ldi	r31, 0x00	; 0
 192:	80 81       	ld	r24, Z
 194:	84 ff       	sbrs	r24, 4
 196:	fd cf       	rjmp	.-6      	; 0x192 <TWI_stop+0xa>
}
 198:	08 95       	ret

0000019a <main>:

int main(void)
{
	// Initializations 
	init_UART0();
	TWI_init_master();
 19a:	2b d0       	rcall	.+86     	; 0x1f2 <init_UART0>
 19c:	80 df       	rcall	.-256    	; 0x9e <TWI_init_master>
	// Variables 
	DDRA = 0xF0;//defining these pins as output//four msb are on the master's side
 19e:	80 ef       	ldi	r24, 0xF0	; 240
 1a0:	8a bb       	out	0x1a, r24	; 26
		
		//uint8_t data=receive_UART0();
		uint8_t data='5';
		//uint8_t final;
		TWI_start();
		TWI_write_address_mt(0x20);
 1a2:	00 e1       	ldi	r16, 0x10	; 16
 1a4:	10 e4       	ldi	r17, 0x40	; 64
		TWI_write_data(data);
 1a6:	d0 ef       	ldi	r29, 0xF0	; 240
 1a8:	82 df       	rcall	.-252    	; 0xae <TWI_start>
 1aa:	80 e2       	ldi	r24, 0x20	; 32
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1ac:	9d df       	rcall	.-198    	; 0xe8 <TWI_write_address_mt>
 1ae:	85 e3       	ldi	r24, 0x35	; 53
 1b0:	c5 df       	rcall	.-118    	; 0x13c <TWI_write_data>
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	80 e7       	ldi	r24, 0x70	; 112
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	21 50       	subi	r18, 0x01	; 1
		_delay_ms(100);
		//TWI_stop();//could try repeat start condition
		//TWI_start();
		TWI_repeated_start();
 1ba:	80 40       	sbci	r24, 0x00	; 0
		PORTA=0x10;
 1bc:	90 40       	sbci	r25, 0x00	; 0
		TWI_write_address_mr(0x21);
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <main+0x1e>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <main+0x28>
 1c2:	00 00       	nop
		PORTA=0x20;
 1c4:	82 df       	rcall	.-252    	; 0xca <TWI_repeated_start>
 1c6:	0b bb       	out	0x1b, r16	; 27
		uint8_t final = TWI_read_data();
 1c8:	81 e2       	ldi	r24, 0x21	; 33
 1ca:	a3 df       	rcall	.-186    	; 0x112 <TWI_write_address_mr>
 1cc:	80 e2       	ldi	r24, 0x20	; 32
		PORTA=0x40;
 1ce:	8b bb       	out	0x1b, r24	; 27
 1d0:	ca df       	rcall	.-108    	; 0x166 <TWI_read_data>
 1d2:	c8 2f       	mov	r28, r24
 1d4:	1b bb       	out	0x1b, r17	; 27
 1d6:	2f ef       	ldi	r18, 0xFF	; 255
 1d8:	80 e7       	ldi	r24, 0x70	; 112
 1da:	92 e0       	ldi	r25, 0x02	; 2
 1dc:	21 50       	subi	r18, 0x01	; 1
		_delay_ms(100);
		TWI_stop();
 1de:	80 40       	sbci	r24, 0x00	; 0
 1e0:	90 40       	sbci	r25, 0x00	; 0
		PORTA=0xF0;
 1e2:	e1 f7       	brne	.-8      	; 0x1dc <main+0x42>
		transmit_UART0(final);
 1e4:	00 c0       	rjmp	.+0      	; 0x1e6 <main+0x4c>
 1e6:	00 00       	nop
 1e8:	cf df       	rcall	.-98     	; 0x188 <TWI_stop>
 1ea:	db bb       	out	0x1b, r29	; 27
 1ec:	8c 2f       	mov	r24, r28
 1ee:	12 d0       	rcall	.+36     	; 0x214 <transmit_UART0>
 1f0:	db cf       	rjmp	.-74     	; 0x1a8 <main+0xe>

000001f2 <init_UART0>:
 1f2:	1b b8       	out	0x0b, r1	; 11
 1f4:	1a b8       	out	0x0a, r1	; 10
 1f6:	e5 e9       	ldi	r30, 0x95	; 149
 1f8:	f0 e0       	ldi	r31, 0x00	; 0
 1fa:	10 82       	st	Z, r1
 1fc:	59 9a       	sbi	0x0b, 1	; 11
 1fe:	8a b1       	in	r24, 0x0a	; 10
 200:	88 61       	ori	r24, 0x18	; 24
 202:	8a b9       	out	0x0a, r24	; 10
 204:	80 81       	ld	r24, Z
 206:	8e 60       	ori	r24, 0x0E	; 14
 208:	80 83       	st	Z, r24
 20a:	87 e6       	ldi	r24, 0x67	; 103
 20c:	89 b9       	out	0x09, r24	; 9
 20e:	10 92 90 00 	sts	0x0090, r1	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
 212:	08 95       	ret

00000214 <transmit_UART0>:
 214:	5d 9b       	sbis	0x0b, 5	; 11
 216:	fe cf       	rjmp	.-4      	; 0x214 <transmit_UART0>
 218:	8c b9       	out	0x0c, r24	; 12
 21a:	08 95       	ret

0000021c <_exit>:
 21c:	f8 94       	cli

0000021e <__stop_program>:
 21e:	ff cf       	rjmp	.-2      	; 0x21e <__stop_program>
